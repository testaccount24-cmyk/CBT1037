DA02     TITLE 'DISASM02 - PARAMETER READER/INTERPRETER'
         MACRO
         REG &REG,&VALUE
         DC     CL3'&REG'            REGISTER NAME
         DC     AL1(&VALUE)          VALUE IN INSTRUCTIONS
         MEND
         COPY  DISASMGB              COPY GLOBAL DEFINITIONS
*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISASM02                                             *
*                                                                    *
*  Function:                                                         *
*   Read the parameter statements.  All parameter statements         *
*   including comment statements are copied to DISFRINT.  See the    *
*   DISASM documentation for a list of the parameter statements      *
*   and their syntax.                                                *
*                                                                    *
*--------------------------------------------------------------------*
         PRINT NOGEN         SAVE A BUSH                        GP10080
DISASM02 MODHEAD BASE=(R12,R10)      ENTRY HOUSEKEEPING         GP99140
         USING REGDSCT,R4            DEFINE BASE
         TM    COMMDD,$INDD  IS INDD PRESENT?                   GP99167
         BNZ   OPENIN        YES                                GP99167
         TM    COMMDD,$ADADD+$LISTDD  ALTERNATE FUNCTION?       GP99167
         BNZ   EXIT0000      YES; JUST SET PRINT FLAGS          GP99167
OPENIN   OPEN  (DISIN,INPUT)         OPEN DISIN                 GP99167
         MVC   COMMSUBH(SUBHEADL),SUBHEAD
         LA    R1,SUBHEADL           SUBHEADING LENGTH
         STH   R1,COMMSUBL           SET LENGTH
*OLD*    TM    PGMFLAG,$SUBH         HAS SUB-HEADING BEEN PRINTED?
*OLD*    BO    PARM0010              YES                        GP99149
*OLD*    OI    PGMFLAG,$SUBH         SET FLAG                   GP99149
         MVI   PRTCMD,$PRTSUBH       SET COMMAND                GP99149
         BAL   R14,PRINTDAT          LINK TO PRINT MODULE       GP99138
         SPACE 2
*---------------------------------------------------------------------*
*   READ SYSIN INPUT UNTIL END                                        *
*---------------------------------------------------------------------*
PARM0010 GET   DISIN,PRTDATA+5       READ A CONTROL STATEMENT   GP10085
         MVC   CTLSTMT,PRTDATA+5                                GP10085
         OI    PGMFLAG,$PFHAVE  HAD INPUT                       GP99167
         BAL   R9,PRT0000            PRINT CONTROL STATEMENT
         CLI   CTLSTMT,C'*'          IS IT A COMMENT?
         BE    PARM0010              YES; IGNORE
         CLC   CTLSTMT(72),COMMBLKS  IS IT A SPACER ?           GP10085
         BE    PARM0010              YES; IGNORE                GP10085
         SPACE 1
         LA    R1,CNTLTBLE           CONTROL TABLE ADDRESS
         LA    R0,CNTLTBL#           NUMBER OF ENTRIES          GP10085
PARM0020 CLC   CTLTYPE,0(R1)         DEFINED CONTROL STATEMENT?
         BE    PARM0030              YES
         LA    R1,CNTLTBLL(,R1)      NEXT KEYWORD/ADDRESS       GP10085
         BCT   R0,PARM0020           LOOP                       GP10085
         MVC   PRTDATA(EMSG03L),EMSG03
         BAL   R9,PRT0000            PRINT MESSAGE
         OI    COMMFLAG,$ABORT       SET ABORT FLAG
         B     PARM0010              READ NEXT STATEMENT
         SPACE 1
PARM0030 ICM   R15,15,9(R1)          INSERT ADDRESS
         BR    R15                   BRANCH TO PROPER ROUTINE
* ------------------------------------------------------------------- *
*                                                                     *
*          Set ABEND flag                                             *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND             ABEND AT EXIT
         OI    COMMFLAG,$ABEND       SET ABEND FLAG
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*    Process ADATA, LIST, and SYSADATA options                        *
*                                                                     *
* ------------------------------------------------------------------- *
ADATA000 ITRACE ID=ADATA                                        GP99167
         LA    R1,CTLTYPE+1                                     GP99167
         LA    R2,1          INCREMENT                          GP99167
         LA    R3,CTL70                                         GP99167
ADATA010 CLI   0(R1),C' '    LEADING BLANK YET?                 GP99167
         BE    ADATA020      YES; NOW GET NON-BLANK             GP99167
         BXLE  R1,R2,ADATA010  TRY AGAIN                        GP99167
         B     ADATA099      COMPLAIN AND IGNORE                GP99167
ADATA020 CLI   0(R1),C' '    NON-BLANK?                         GP99167
         BNE   ADATA030      YES; START COMPARE                 GP99167
         BXLE  R1,R2,ADATA020  TRY AGAIN                        GP99167
         B     PARM0010                                         GP99167
ADATA030 LM    R5,R7,ADATAOPT  GET ADATA OPTIONS                GP99167
         SR    R15,R15       CLEAR FOR LENGTH IC                GP99167
ADATA040 IC    R15,0(,R5)    GET VERB LENGTH                    GP99167
         EX    R15,EXPRTCLC  LOOK FOR MATCH                     GP99167
         BE    ADATA100      WOW                                GP99167
         BXLE  R5,R6,ADATA040  TRY AGAIN                        GP99167
ADATA099 MVC   PRTDATA(EMSG33L),EMSG33  INVALID STATEMENT       GP09181
         MVI   PRTDATA+EMSG33L+1,C':'                           GP09181
         MVC   PRTDATA+EMSG33L+3(8),0(R1)                       GP09181
         BAL   R9,PRT0000                                       GP99167
         B     PARM0010              IGNORE REMAINDER           GP99167
ADATA100 NC    PRINTFG3(1),2(R5)   RESET FLAG FOR THIS OPTION   GP99167
         OC    PRINTFG3(1),1(R5)   SET FLAG FOR THIS OPTION     GP99167
         AR    R1,R15        SKIP OVER MATCHED TEXT             GP99167
         B     ADATA010      GET NEXT SPACE AND OPERAND         GP99167
ADATAOPT DC    A(ADATAO1,ADATAO2-ADATAO1,ADATAOL)               GP99167
ADATAO1  DC    AL1(05,$PFMAC,255),CL10'MACRO '                  GP99167
ADATAO2  DC    AL1(03,$PFMAC,255),CL10'MAC   '                  GP99167
         DC    AL1(04,$PFCOPY,255),CL10'COPY '                  GP99167
         DC    AL1(06,0,255-$PFCOPY),CL10'NOCOPY '              GP99167
         DC    AL1(07,0,255-$PFMAC),CL10'NOMACRO'               GP99167
         DC    AL1(05,0,255-$PFMAC),CL10'NOMAC'                 GP99167
         DC    AL1(06,$PFMAC+$PFCOPY,255),CL10'EXPAND'          GP99167
ADATADEF DC    AL1(07,0,255),CL10'DEFAULT'                      GP99167
         DC    AL1(04,0,255),CL10'MOST       '                  GP99167
ADATAOL  DC    AL1(03,0,255),CL10'ALL '                         GP99167
* ------------------------------------------------------------------- *
*                                                                     *
*          Process assembler input                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ASM0000  DS    0H
         ITRACE ID=ASMSTART
         CLI   CTL10,C' '    USER SPECIFIED?                    GP99139
         BNE   ASM0015       YES; KEEP IT                       GP99139
         MVC   CTLSTMT+10(2),=C'0 '  MAKE ACCEPTABLE OFFSET     GP99139
         B     ASM0015       WRITE THE 'ASM START ' CARD        GP99139
ASM0010  DS    0H
         GET   DISIN,CTLSTMT         READ A CONTROL STATEMENT
         MVC   PRTDATA+8(CTLSTMTL),CTLSTMT                      GP99139
         BAL   R9,PRT0000            PRINT CONTROL STATEMENT    GP99139
         CLC   CTLTYPE,CNTLASME      ASSEMBLER INPUT (END)?     GP99139
         BE    ASM0030               YES
ASM0015  TM    PGMFLAG,$ASMOPEN      ASSEMBLER DCB OPEN?        GP99139
         BO    ASM0020               YES
         OI    PGMFLAG,$ASMOPEN      INDICATE DCB IS OPEN
         OI    COMMFLAG,$ASMIN       INDICATE ASSEMBLER INPUT PRESENT
         OPEN  (SYSIN,OUTPUT)        OPEN SYSIN DCB
         PUT   SYSIN,=CL80'PRINT    OPSYN ANOP  '               GP10025
ASM0020  DS    0H
         TM    PGMFLAG,$AFLUSH   END CARD ALREADY DONE?         GP99139
         BNZ   ASM0025           YES; DON'T WRITE AGAIN         GP99139
         PUT   SYSIN,CTLSTMT         COPY CONTROL STATEMENT TO SYSIN
         LA    R14,1                                            GP99139
         LA    R15,CTLSTMT+20                                   GP99139
         LA    R1,CTLSTMT                                       GP99139
ASM0022  CLC   =C' END ',0(R1)   USER SUPPLIED END STATEMENT?   GP99139
         BE    ASM0028       YES; QUIT NOW                      GP99139
         BXLE  R1,R14,ASM0022    CONTINUE CHECKING              GP99139
         B     ASM0010               LOOP UNTIL EOF OR 'ASM END'
ASM0025  LA    R1,EMSG26     SHOW CARD IGNORED                  GP99139
         BAL   R14,PRINTMSG  PRINT IT                           GP99139
         B     ASM0010       READ NEXT                          GP99139
ASM0028  OI    PGMFLAG,$AFLUSH   INDICATE END CARD FOUND        GP99139
         B     ASM0010           AND LOOP AGAIN                 GP99139
ASM0030  DS    0H
         TM    PGMFLAG,$ASMOPEN      ASSEMBLER DCB OPEN?        GP99139
         BZ    ASM0035       NO; OOPS                           GP99139
         TM    PGMFLAG,$AFLUSH   END CARD ALREADY DONE?         GP99139
         BNZ   ASM0035           YES; DON'T WRITE AGAIN         GP99139
         MVI   CTLSTMT,C' '                                     GP99139
         MVC   CTLSTMT+1(79),CTLSTMT  BLANK IT                  GP99139
         MVC   CTLSTMT+9(3),=C'END'                             GP99139
         PUT   SYSIN,CTLSTMT   WRITE FINAL END CARD             GP99139
ASM0035  DS    0H                                               GP99139
         ITRACE ID=ASMEND
         B     PARM0010              READ NEXT CONTROL STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*          Process BASE statements                                    *
*                                                                     *
* ------------------------------------------------------------------- *
BASE0000 DS    0H
         ITRACE ID=BASE
         LA    R1,CTL10              REGISTER NAME'S ADDRESS
         BAL   R9,REG0000            FIND REGISTER TABLE ENTRY
* ------------------------------------------------------------------- *
*       R4 POINTS TO REGISTER TABLE ENTRY                             *
* ------------------------------------------------------------------- *
         LA    R1,8                  MAX DIGITS
         LA    R2,CTL20              FIRST CHARACTER OF DISPLACEMENT
         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX
         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT
         CLC   CTL30,COMMBLKS        ENDING DISPLACEMENT BLANK?
         BE    BASE0010              YES
         LA    R1,8                  MAX DIGITS
         LA    R2,CTL30              FIRST CHARACTER OF DISPLACEMENT
         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX
         MVC   SAVEEND,DISPOUT       SAVE ENDING DISPLACEMENT
         CLC   SAVEBEGN,SAVEEND      BEGIN LARGER THAN END?
         BH    BASE0060              YES.. INVALID
         B     BASE0030
BASE0010 DS    0H
         L     R1,SAVEBEGN           BEGINNING POINT            GP99172
         AH    R1,H4096              PLUS 4K
         ST    R1,SAVEEND            SAVE ENDING POINT          GP99172
BASE0030 DS    0H
         LA    R1,8                  MAX DIGITS
         LA    R2,CTL40              FIRST CHARACTER OF DISPLACEMENT
         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX
         LA    R5,COMMBASE           SET PREVIOUS FORWARD POINTER
         ICM   R3,15,COMMBASE        FIRST BASE ENTRY
         USING BASEDSCT,R3           DEFINE BASE
         BZ    BASE0050              NO BLOCK'S ON CHAIN
BASE0040 DS    0H
         CLC   BASEBEGN,DISPOUT      INSERT IT HERE?
         BL    BASE0050              YES
         LA    R5,BASENEXT           FORWARD POINTER'S ADDRESS
         ICM   R3,15,BASENEXT        NEXT BASE BLOCK
         BNZ   BASE0040              LOOP
BASE0050 LA    R0,BASEL                                         GP99140
         BAL   R14,GETMAIN           ACQUIRE STORAGE FOR NEW BASE BLOCK
         ITRACE ID=NEWBASE,          NEW BLOCK ACQUIRED                +
               RDATA1=R1             .. CAPTURE STORAGE ADDRESS
         ST    R1,0(,R5)             CHAIN PREVIOUS BLOCK TO NEW BLOCK
         ST    R3,BASENEXT-BASEDSCT(,R1)  CHAIN NEXT BLOCK TO NEW BLOCK
         LR    R3,R1                 SET BASE
         MVC   BASEEYE,CNTLBASE      SET BLOCK IDENTIFIER
         MVC   BASEBEGN,SAVEBEGN     SET STARTING DISPLACEMENT
         MVC   BASEEND,SAVEEND       SET ENDING DISPLACEMENT
         MVC   BASEREG,REGVALUE      SET BASE REGISTER
         MVC   BASEDISP,DISPOUT      SET DISPLACEMENT BASE REFERS TO
         B     PARM0010              READ NEXT CONTROL STATEMENT
BASE0060 DS    0H
         MVC   PRTDATA(EMSG23L),EMSG23
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*          Process CSECT statements                                   *
*                                                                     *
* ------------------------------------------------------------------- *
CSCT0000 DS    0H
         ITRACE ID=CSCTNAME,         CSECT NAME                        +
               DATA1=CTLDATA
         MVC   COMMCSNM,CTLDATA      SET CSECT NAME
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process DATA statements                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DATA0000 DS    0H
         ITRACE ID=DATA
         LA    R1,8                  MAX DIGITS
         LA    R2,CTL10              FIRST CHARACTER OF DISPLACEMENT
         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX
         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT
         LA    R1,8                  MAX DIGITS
         LA    R2,CTL20              FIRST CHARACTER OF END DISP
         BAL   R9,HEX0000            CONVERT END DISP TO HEX
         CLC   SAVEBEGN,DISPOUT      VALID RANGE ?              GP05168
         BH    BASE0060              NO; FAIL                   GP05168
         LA    R2,COMMDATA           DATA BLOCK ANCHOR
         ICM   R3,15,COMMDATA        FIRST DATA BLOCK
         USING DATADSCT,R3           DEFINE BASE
         BZ    DATA0030              NO DATA BLOCKS
DATA0010 DS    0H
         CLC   DATAEND,SAVEBEGN      BELOW THIS AREA?
         BL    DATA0020              YES
         CLC   DATABEGN,DISPOUT      ABOVE THIS AREA?
         BH    DATA0030              YES
         B     DATA0040              OVERLAPS PREVIOUSLY DEFINED AREA
DATA0020 DS    0H
         LA    R2,DATANEXT           FORWARD POINTER ADDRESS
         ICM   R3,15,DATANEXT        NEXT DATA BLOCK
         BNZ   DATA0010              LOOP
DATA0030 LA    R0,DATAL                                         GP99140
         BAL   R14,GETMAIN           ACQUIRE STORAGE FOR NEW DATA BLOCK
         ITRACE ID=NEWDATA,          NEW DATA BLOCK ADQUIRED           +
               RDATA1=R1             .. NEW BLOCK'S ADDRESS
         ST    R1,0(,R2)             PREVIOUS BLOCK TO NEW BLOCK
         ST    R3,DATANEXT-DATADSCT(,R1)  CHAIN NEXT BLOCK TO NEW BLOCK
         LR    R3,R1                 SET BASE REG
         MVC   DATAEYE,CNTLDATA      SET BLOCK IDENTIFIER
         MVC   DATABEGN,SAVEBEGN     SET BEGINNING DISPLACEMENT
         MVC   DATAEND,DISPOUT       SET ENDING DISPLACEMENT
         L     R1,DATAEND            ENDING DISPLACEMENT        GP99172
         S     R1,DATABEGN           BEGINNING DISPLACEMENT     GP99172
         LA    R1,1(,R1)             TOTAL LENGTH
         ST    R1,DATALEN    SET LENGTH                         GP99172
         STH   R1,DATAILEN   SET LENGTH                         GP99172
         MVI   DATATYPE,$DATAUSR     USER DEFINED DATA AREA
         CLI   CTLTYPE,C'D'  INVOKED WITH DATA ?                GP10029
         BE    *+8           YES                                GP10029
         MVI   DATATYPE,$DATADS      DEFINE AS DS FILLER        GP10029
         OI    COMMOPFG,$OFZERO      REMEMBER USE OF FILLER     GP10066
         MVC   DATANAME,COMMBLKS     INITIALIZE NAME
*OBS*    XC    DATALBA,DATALBA       INITIALIZE DATA BLOCK'S ADDRESS
         CLI   CTL30,C' '    USER SPECIFIED DATA TYPE?          GP99169
         BNH   PARM0010      NO                                 GP99169
         MVC   DATAASMT,CTL30  ELSE SAVE IT                     GP99169
         CLI   CTL40,C' '    USER SPECIFIED ITEM LENGTH?        GP99169
         BNH   PARM0010      NO                                 GP99169
         LA    R1,5          MAX LENGTH                         GP99172
         LA    R2,CTL40      POINT TO ITEM LENGTH               GP99172
         BAL   R9,INTG000    CONVERT TO INTEGER                 GP99172
         STH   R0,DATAILEN   SET ITEM LENGTH                    GP99172
         B     PARM0010              READ NEXT CONTROL STATEMENT
DATA0040 DS    0H
         ITRACE ID=DATAOVLP          DATA AREA OVERLAP
         UNPK  EMSG22A(5),DATABEGN+2(3)                         GP10037
         TR    EMSG22A,COMMHXTR      TRANSLATE TO PRINTABLE
         MVI   EMSG22A+4,C' '        RESTORE BLANK
         UNPK  EMSG22B(5),DATAEND+2(3) UNPACK END DISPLACEMENT  GP10037
         TR    EMSG22B,COMMHXTR      TRANSLATE TO PRINTABLE
         MVI   EMSG22B+4,C' '        RESTORE BLANK
         MVC   PRTDATA(EMSG22L),EMSG22
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010              READ NEXT CONTROL STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*          LABEL STATEMENTS - DEFINE USER LABELS                      *
*                                                                     *
* ------------------------------------------------------------------- *
LABL0000 DS    0H                                               GP99134
         CLI   CTL10,C' '    LABEL SPECIFIED?                   GP99139
         BE    LABL9990      NO; FAIL                           GP99139
         CLC   =C'DATA',CTL10  RESERVED WORD ?                  GP99139
         BE    LABL9990      YES; FAIL                          GP99139
         LA    R1,8                  MAX DIGITS                 GP99139
         LA    R2,CTL20              FIRST CHARACTER OF DISPLACEMENT
         BAL   R9,HEX0000            CONVERT DISPLACEMENT TO HEX
         ITRACE ID=ADDLABEL,         CSECT REFERENCE                   +
               DATA1=DISPOUT         .. DISPLACEMENT REFERENCED GP99139
         LA    R3,COMMLABL           FORWARD POINTER'S ADDRESS  GP99139
         ICM   R9,15,COMMLABL        FIRST CSECT LABEL          GP99139
         USING LABLDSCT,R9           DEFINE BASE                GP99139
         BZ    LABL1170              INSERT ON END OF CHAIN     GP99139
LABL1160 DS    0H                                               GP99139
         CLC   LABLDISP,DISPOUT      TEST DISPLACEMENT          GP99139
         BE    LABL1190              DUPLICATE                  GP99139
         BH    LABL1170              INSERT NEW NAME HERE       GP99139
         LA    R3,LABLNEXT           CURRENT BLOCK'S FWD POINTER ADDR
         ICM   R9,15,LABLNEXT        NEXT CSECT LABEL           GP99139
         BNZ   LABL1160              LOOP                       GP99139
LABL1170 LA    R0,LABLL                                         GP99139
         BAL   R14,GETMAIN           ACQUIRE STORAGE FOR NEW LABL BLOCK
         ITRACE ID=NEWLABL,          NEW CSECT LABEL                   +
               RDATA1=R1,            .. BLOCK'S ADRESS                 +
               DATA2=DISPOUT         .. LABEL'S DISPLACEMENT    GP99139
         ST    R1,LABLNEXT-LABLDSCT(,R3) PREVIOUS BLOCK'S FWD POINTER
         ST    R9,LABLNEXT-LABLDSCT(,R1) NEXT BLOCK'S ADDRESS   GP99139
         LR    R9,R1                 SET BASE                   GP99139
         MVI   LABLSRCE,$LABLU SHOW SUPPLIED BY USER            GP99139
         MVC   LABLEYE,=CL8'LABL'    SET BLOCK ID               GP99139
         MVC   LABLNAME,CTL10        SET LABEL'S NAME           GP99139
         MVC   LABLDISP,DISPOUT      SET DISPLACEMENT           GP99139
         MVC   LABLTYPE,CTL30  MOVE POSSIBLE TYPE               GP99139
         CLI   CTL30,C' '    USER SPECIFIED TYPE?               GP99139
         BNE   LABL1180                                         GP99139
         CLI   LABLTYPE,C'D'   DATA?                            GP99139
         BE    PARM0010      YES; PROCESS                       GP99139
         CLI   LABLTYPE,C'I'   INSTRUCTION?                     GP99139
         BE    PARM0010      YES; PROCESS                       GP99139
LABL1180 MVI   LABLTYPE,$LABLU       SET LABEL TYPE - USER'S    GP99139
         B     PARM0010                                         GP99134
LABL1190 LA    R1,EMSG25     SET DUPLICATE OR OVERLAPPING       GP99139
         B     LABL9995                                         GP99139
LABL9990 LA    R1,EMSG24     SET MALFORMED                      GP99139
LABL9995 OI    COMMFLAG,$ERROR+$ABORT  NOT GOOD                 GP99139
         BAL   R14,PRINTMSG  PRINT ERROR MESSAGE                GP99139
         B     PARM0010                                         GP99134
* ------------------------------------------------------------------- *
*                                                                     *
*          Line count statements                                      *
*                                                                     *
* ------------------------------------------------------------------- *
LINE0000 DS    0H
         ITRACE ID=LINES
         MVC   LINEIN,LINEIN-1       INITIALIZE WITH ZEROS
         LA    R1,CTL10              FIRST DIGIT
         LA    R2,3                  MAX DIGITS
LINE0010 DS    0H
         CLI   0(R1),C' '            BLANK
         BE    LINE0020              YES
         CLI   0(R1),C'0'            INVALID DIGIT?
         BL    LINE0030              YES
         CLI   0(R1),C'9'            INVALID DIGIT?
         BH    LINE0030              YES
         MVC   LINEIN(L'LINEIN-1),LINEIN+1 SHIFT DIGITS LEFT 1
         MVC   LINEIN+2(1),0(R1)     INSERT IN LOW ORDER POSITION
         LA    R1,1(,R1)             NEXT DIGIT
         BCT   R2,LINE0010           LOOP
LINE0020 DS    0H
         CLC   0(6,R1),COMMBLKS      SEVERAL TRAILING BLANKS?
         BNE   LINE0040              NO
         PACK  LINEOUT,LINEIN        PACK LINE COUNT
         CP    LINEOUT,PMIN          LESS THAN MINIMUM?
         BL    LINE0050              YES
         ZAP   COMMMAXL,LINEOUT      SET MAX LINE COUNT
         B     PARM0010              READ NEXT CONTROL STATEMENT
LINE0030 DS    0H
         MVC   PRTDATA(EMSG16L),EMSG16
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
LINE0040 DS    0H
         MVC   PRTDATA(EMSG17L),EMSG17
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
LINE0050 DS    0H
         MVC   PRTDATA(EMSG18L),EMSG18
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process MODULE Statements                                  *
*                                                                     *
* ------------------------------------------------------------------- *
MOD0000  DS    0H
         ITRACE ID=MODNAME,          MODULE NAME                       +
               DATA1=CTLDATA
         MVC   COMMMOD,CTLDATA       SET MODULE NAME
         CLI   CTL20,C' '    SECOND PARAMETER PRESENT ?         GP99149
         BE    PARM0010      NO                                 GP99149
         MVC   COMMCSNM,CTL20  TREAT AS CSECT NAME              GP99149
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          PREFIX STATEMENTS (LABEL NOW DEFINES USER LABELS)          *
*                                                                     *
* ------------------------------------------------------------------- *
PRFX0000 DS    0H                                               GP99134
         ITRACE ID=PREFIX                                       GP99134
         CLC   COMMPFX,COMMBLKS      PREFIX STILL BLANK?        GP99134
         BNE   PRFX0030              NO.. DUPLICATED            GP99134
         CLI   CTL10,C' '            PREFIX BLANK?              GP99134
         BE    PRFX0040              YES.. INVALID              GP99134
         CLC   CTL10(4),CNTLDATA     PREFIX 'DATA'?             GP99134
         BE    PRFX0050              YES.. NOT VALID            GP99134
         LA    R1,CTL10              FIRST CHARACTER OF PREFIX  GP99134
         LA    R2,4                  MAXIMUM LENGTH             GP99134
         SR    R3,R3                 INITIALIZE FOR LENGTH      GP99134
PRFX0010 DS    0H                                               GP99134
         CLI   0(R1),C' '            BLANK?                     GP99134
         BE    PRFX0020              YES                        GP99134
         LA    R1,1(,R1)             NEXT                       GP99134
         LA    R3,1(,R3)             ADD 1 TO LENGTH            GP99134
         BCT   R2,PRFX0010           LOOP                       GP99134
PRFX0020 DS    0H                                               GP99134
         CLC   COMMBLKS(4),0(R1)     A FEW BLANKS?              GP99134
         BNE   PRFX0060              NO                         GP99134
         MVC   COMMPFX,CTL10         SET PREFIX                 GP99134
         STH   R3,COMMPFXL           SET PREFIX LENGTH          GP99134
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0030 DS    0H                                               GP99134
         OI    COMMFLAG,$ERROR+$ABORT                           GP99134
         MVC   PRTDATA(EMSG19L),EMSG19                          GP99134
         BAL   R9,PRT0000            PRINT MESSAGE              GP99134
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0040 DS    0H                                               GP99134
         OI    COMMFLAG,$ERROR+$ABORT                           GP99134
         MVC   PRTDATA(EMSG11L),EMSG11                          GP99134
         BAL   R9,PRT0000            PRINT MESSAGE              GP99134
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0050 DS    0H                                               GP99134
         OI    COMMFLAG,$ERROR+$ABORT                           GP99134
         MVC   PRTDATA(EMSG15L),EMSG15                          GP99134
         BAL   R9,PRT0000            PRINT MESSAGE              GP99134
         B     PARM0010              READ NEXT CONTROL STATEMENT
PRFX0060 DS    0H                                               GP99134
         OI    COMMFLAG,$ERROR+$ABORT                           GP99134
         MVC   PRTDATA(EMSG12L),EMSG12                          GP99134
         BAL   R9,PRT0000            PRINT MESSAGE              GP99134
         B     PARM0010              READ NEXT CONTROL STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*        OPTIONS STATEMENTS - DEFINE (MINOR) PROCESSING OPTIONS       *
*                                                                     *
*   ABSR    EXPAND REGISTERS AS 0-15 RATHRE THAN R0-R15               *
*   BC      EXPAND BC AS BC, BCR AS BCR; DON'T USE MNEMONICS          *
*   IXSWAP  TREAT DDD(X,0) AS DDD(0,X) FOR LABEL LOOKUP               *
*   LOWER   ACCEPT LOWER CASE IN CHARACTER DATA (ELSE GEN AS HEX)     *
*   PLS     EXPAND REGISTERS AS @nn (PL/S, BLS STYLE)                 *
*   ROUND   INCREASE CSECT LENGTH TO MULTIPLE OF EIGHT                *
*   S360    USE SYSTEM/360 UNIVERSAL INSTRUCTIONS (NO SSM, NO I/O)    *
*   S370  (DEFAULT) USE S/370 INSTRUCTION SET (NO SSM, NO I/O)        *
*   S390    USE S/390 INSTRUCTION SET (NO I/O, ETC)                   *
*                                                                     *
* ------------------------------------------------------------------- *
OPTS000  ITRACE ID=OPTIONS                                      GP08063
         LA    R1,CTLTYPE+1                                     GP08063
         LA    R2,1          INCREMENT                          GP08063
         LA    R3,CTL70                                         GP08063
OPTS0010 CLI   0(R1),C' '    LEADING BLANK YET?                 GP08063
         BE    OPTS0020      YES; NOW GET NON-BLANK             GP08063
         BXLE  R1,R2,OPTS0010  TRY AGAIN                        GP08063
         B     PRNT0099      COMPLAIN AND IGNORE                GP08063
OPTS0020 CLI   0(R1),C' '    NON-BLANK?                         GP08063
         BNE   OPTS0030      YES; START COMPARE                 GP08063
         BXLE  R1,R2,OPTS0020  TRY AGAIN                        GP08063
         B     PARM0010                                         GP08063
OPTS0030 LM    R5,R7,TABOPTS   GET OPTION TABLE                 GP08063
         SR    R15,R15       CLEAR FOR LENGTH IC                GP08063
OPTS0040 IC    R15,0(,R5)    GET VERB LENGTH                    GP08063
         EX    R15,EXPRTCLC  LOOK FOR MATCH                     GP08063
         BE    OPTS0100      WOW                                GP08234
         BXLE  R5,R6,OPTS0040  TRY AGAIN                        GP08063
OPTS0050 LM    R5,R7,TABOPCS   GET OPTION TABLE                 GP09181
         SR    R15,R15       CLEAR FOR LENGTH IC                GP09181
OPTS0060 IC    R15,0(,R5)    GET VERB LENGTH                    GP09181
         EX    R15,EXPRTCLC  LOOK FOR MATCH                     GP09181
         BE    OPTS0120      WOW                                GP09181
         BXLE  R5,R6,OPTS0060  TRY AGAIN                        GP09181
OPTS0099 MVC   PRTDATA(EMSG33L),EMSG33  INVALID OPTION          GP09181
         MVI   PRTDATA+EMSG33L+1,C':'                           GP09181
         MVC   PRTDATA+EMSG33L+3(8),0(R1)                       GP09181
         BAL   R9,PRT0000                                       GP08063
         B     PARM0010              IGNORE REMAINDER           GP08063
OPTS0100 OC    COMMOPFG(2),1(R5)   SET FLAG FOR THIS OPTION     GP08063
         AR    R1,R15        SKIP OVER MATCHED TEXT             GP08063
         B     OPTS0010      GET NEXT SPACE AND OPERAND         GP08063
OPTS0120 SR    R6,R6         CLEAR FOR IC                       GP09181
         ICM   R6,3,1(R5)    LOAD TABLE DISPLACEMENT            GP09181
         BM    OPTS0140      LOWER CASE TABLES                  GP09181
         L     R7,TAB@OPCD(R6)    LOAD OPCODE TABLE ADDRESS     GP09181
         LTR   R7,R7         RESOLVED?                          GP09181
         BZ    OPTS0099      NO; FAIL                           GP09181
         LA    R6,AOP-8      GET OPERATIONS ENTRY IN COMMON     GP09181
         MVC   0(8,R6),3(R5)    REPEAT ENTRY                    GP09181
         ST    R7,8(,R6)     SET NEW TABLE ADDRESS              GP09181
         AR    R1,R15        SKIP OVER MATCHED TEXT             GP09181
         B     OPTS0010      GET NEXT SPACE AND OPERAND         GP09181
OPTS0140 XC    COMMPRT+X'81'(9),COMMPRT+X'81'  ENABLE L.C. A-I  GP09181
         XC    COMMPRT+X'91'(9),COMMPRT+X'91'  ENABLE L.C. J-R  GP09181
         XC    COMMPRT+X'A2'(8),COMMPRT+X'A2'  ENABLE L.C. S-Z  GP09181
         MVC   COMMNPRT+X'81'(9),=9X'FF'       ENABLE L.C. A-I  GP09181
         MVC   COMMNPRT+X'91'(9),=9X'FF'       ENABLE L.C. J-R  GP09181
         MVC   COMMNPRT+X'A2'(8),=9X'FF'       ENABLE L.C. S-Z  GP09181
         AR    R1,R15        SKIP OVER MATCHED TEXT             GP09181
         B     OPTS0010      GET NEXT SPACE AND OPERAND         GP09181
TABOPTS  DC    A(TABOPT1,TABOPT2-TABOPT1,TABOPTL)               GP08063
TABOPT1  DC    AL1(06,$OFIXSWP,0),CL10'IXSWAP   '               GP08234
TABOPT2  DC    AL1(05,$OFIXSWP,0),CL10'IXSWP     '              GP08234
         DC    AL1(06,$OFIXSWP,0),CL10'SWAPIX    '              GP08234
         DC    AL1(07,$OFNOBLK,0),CL10'FIXSECT   '              GP10074
         DC    AL1(05,$OFROUND,0),CL10'ROUND     '              GP10069
         DC    AL1(02,$OFBCOP,0),CL10'BC        '               GP10029
         DC    AL1(03,$OFBCOP,0),CL10'BCR       '               GP10029
         DC    AL1(04,$OFBCOP,0),CL10'BCOP      '               GP10029
         DC    AL1(08,$OFBCOP,0),CL10'BCOPCODE  '               GP10029
         DC    AL1(03,$OFPLSR,0),CL10'PLS       '  REGS AS @nn  GP10055
         DC    AL1(03,$OFPLSR,0),CL10'RAT       '               GP10055
         DC    AL1(04,$OFABSR,0),CL10'ABSR      '  REGS AS  nn  GP10029
         DC    AL1(04,$OFABSR,0),CL10'AREG      '               GP10029
TABOPTL  DC    AL1(06,$OFABSR,0),CL10'ABSREG    '               GP10029
TABOPCS  DC    A(TABOPC1,TABOPC2-TABOPC1,TABOPCL)               GP09181
TABOPC1  DC    AL1(04,0,0),CL10'S360     '                      GP09181
TABOPC2  DC    AL1(05,0,0),CL10'S/360     '                     GP09181
         DC    AL1(04,0,4),CL10'S370      '                     GP09181
         DC    AL1(05,0,4),CL10'S/370     '                     GP09181
         DC    AL1(04,0,8),CL10'S390      '                     GP09181
         DC    AL1(05,0,8),CL10'S/390     '                     GP10015
         DC    AL1(05,128,0),CL10'LOWER   '                     GP09181
         DC    AL1(05,128,0),CL10'UPLOW   '                     GP09181
TABOPCL  DC    AL1(05,0,8),CL10'S/390     '                     GP09181
         WXTRN DISOP360,DISOP370,DISOP390                       GP09181
TAB@OPCD DC    A(DISOP360,DISOP370,DISOP390)     360/370/390    GP09181
         SPACE 1
* ------------------------------------------------------------------- *
*                                                                     *
*        OPCODE STATEMENT - LOAD EXTERNAL OPCODE DEFINITIONS          *
*                                                                     *
* ------------------------------------------------------------------- *
OPCD000  ITRACE ID=OPCODES                                      GP10015
         LA    R1,CTLTYPE+1                                     GP10015
         LA    R2,1          INCREMENT                          GP10015
         LA    R3,CTL70                                         GP10015
OPCD0010 CLI   0(R1),C' '    LEADING BLANK YET?                 GP10015
         BE    OPCD0020      YES; NOW GET NON-BLANK             GP10015
         BXLE  R1,R2,OPCD0010  TRY AGAIN                        GP10015
         B     PRNT0099      COMPLAIN AND IGNORE                GP10015
OPCD0020 CLI   0(R1),C' '    NON-BLANK?                         GP10015
         BNE   OPCD0030      YES; START COMPARE                 GP10015
         BXLE  R1,R2,OPCD0020  TRY AGAIN                        GP10015
         B     OPCD0099                                         GP10015
OPCD0030 MVC   COMMDWRD,COMMBLKS   CLEAR MODULE NAME            GP10015
         LR    R7,R1         REMEMBER THE START                 GP10015
         LA    R14,COMMDWRD                                     GP10015
         LA    R3,7(,R1)     SET FOR MAXIMUM LENGTH             GP10015
OPCD0040 CLI   0(R1),C' '    TRAILING BLANK ?                   GP10015
         BE    OPCD0050      YES; TRY TO LOAD IT                GP10015
         MVC   0(1,R14),0(R1)    DO IT THE SLOW WAY             GP10015
         AR    R14,R2        BUMP OUTPUT                        GP10015
         BXLE  R1,R2,OPCD0040   BUMP INPUT                      GP10015
OPCD0050 CLI   0(R1),C' '    TRAILING BLANK ?                   GP10015
         BNE   OPCD0099      NO; MALFORMED NAME                 GP10015
         LOAD  EPLOC=COMMDWRD,ERRET=OPCD0091                    GP10015
         LA    R6,AOP-8      GET OPERATIONS ENTRY IN COMMON     GP10015
         MVC   0(8,R6),COMMDWRD   REPEAT NAME                   GP10015
         ST    R0,8(,R6)     SET NEW TABLE ADDRESS              GP10015
         B     PARM0010      IGNORE REST OF CARD                GP10015
OPCD0091 MVC   PRTDATA(EMSG34L),EMSG34  MISSING MODULE          GP10015
         MVI   PRTDATA+EMSG34L+1,C':'                           GP10015
         MVC   PRTDATA+EMSG34L+3(8),COMMDWRD                    GP10015
         BAL   R9,PRT0000                                       GP10015
         B     PARM0010              IGNORE REMAINDER           GP10015
OPCD0099 MVC   PRTDATA(EMSG33L),EMSG33  INVALID OPTION          GP10015
         MVI   PRTDATA+EMSG33L+1,C':'                           GP10015
         MVC   PRTDATA+EMSG33L+3(9),0(R7)                       GP10015
         BAL   R9,PRT0000                                       GP10015
         B     PARM0010              IGNORE REMAINDER           GP10015
         SPACE 1
* ------------------------------------------------------------------- *
*                                                                     *
*          PRINT STATEMENTS - DEFINE PRINTED OUTPUT                   *
*                                                                     *
*   DIR    DIRECTORY INFORMATION FOR MEMBER                           *
*   ESD/CESD  LIST OF CESD CONTROL INFORMATION IN MEMBER              *
*   RLD    LISTING OF RLD DATA IN MEMBER                              *
*   HEX    LISTING OF CSECT CONTENTS IN HEX                           *
*   SYM    LISTING OF MEMBER'S SYMBOL TABLE DATA (ASM/LINK W/TEST OPT)*
*   DAT    LISTING OF MEMBER'S SYSADATA RECORDS (ASM W/ADATA OPTION)  *
*   LBL    LIST OF DEFINED AND GENERATED LABELS                       *
*   ASM    LIST GENERATED SOURCE                                      *
*   XREF   LIST STATEMENT CROSS-REFERENCE                             *
*   TRACE  LIST TRACE TABLE ON ABNORMAL END                           *
*   DEBUG  PRINT DEBUGGING INFORMATION (INDEPENDENT OF DISDEBUG)      *
*                                                                     *
* ------------------------------------------------------------------- *
PRNT0000 ITRACE ID=PRINT                                        GP99167
         LA    R1,CTLTYPE+1                                     GP99134
         LA    R2,1          INCREMENT                          GP99134
         LA    R3,CTL70                                         GP99134
PRNT0010 CLI   0(R1),C' '    LEADING BLANK YET?                 GP99134
         BE    PRNT0020      YES; NOW GET NON-BLANK             GP99134
         BXLE  R1,R2,PRNT0010  TRY AGAIN                        GP99134
         B     PRNT0099      COMPLAIN AND IGNORE                GP99134
PRNT0020 CLI   0(R1),C' '    NON-BLANK?                         GP99134
         BNE   PRNT0030      YES; START COMPARE                 GP99134
         BXLE  R1,R2,PRNT0020  TRY AGAIN                        GP99134
         B     PARM0010                                         GP99134
PRNT0030 LM    R5,R7,PRINTOPT  GET PRINT OPTIONS                GP99134
         SR    R15,R15       CLEAR FOR LENGTH IC                GP99134
PRNT0040 IC    R15,0(,R5)    GET VERB LENGTH                    GP99134
         EX    R15,EXPRTCLC  LOOK FOR MATCH                     GP99134
         BE    PRNT0100      WOW                                GP99134
         BXLE  R5,R6,PRNT0040  TRY AGAIN                        GP99134
PRNT0099 MVC   PRTDATA(EMSG33L),EMSG33  INVALID STATEMENT       GP09181
         MVI   PRTDATA+EMSG33L+1,C':'                           GP09181
         MVC   PRTDATA+EMSG33L+3(8),0(R1)                       GP09181
         BAL   R9,PRT0000                                       GP99134
         B     PARM0010              IGNORE REMAINDER           GP99134
PRNT0100 OC    PRINTFG1(2),1(R5)   SET FLAG FOR THIS OPTION     GP99149
         AR    R1,R15        SKIP OVER MATCHED TEXT             GP99134
         B     PRNT0010      GET NEXT SPACE AND OPERAND         GP99134
EXPRTCLC CLC   0(0,R1),3(R5)  MATCHING TEXT W/TRAILING BLANK    GP99134
PRINTOPT DC    A(PRINTO1,PRINTO2-PRINTO1,PRINTOL)               GP99134
PRINTO1  DC    AL1(09,$PFDIR,0),CL10'DIRECTORY '                GP99149
PRINTO2  DC    AL1(03,$PFDIR,0),CL10'DIR       '                GP99149
         DC    AL1(03,$PFESD,0),CL10'ESD       '                GP99149
         DC    AL1(04,$PFESD,0),CL10'CESD      '                GP99149
         DC    AL1(03,$PFRLD,0),CL10'RLD       '                GP99149
         DC    AL1(04,$PFSYM,0),CL10'SYMT      '                GP99149
         DC    AL1(03,$PFSYM,0),CL10'SYM       '                GP99149
         DC    AL1(05,$PFDAT,0),CL10'ADATA     '                GP99149
         DC    AL1(04,$PFDAT,0),CL10'DATA      '                GP99149
         DC    AL1(03,$PFDAT,0),CL10'DAT       '                GP99149
         DC    AL1(03,$PFLBL,0),CL10'LBL       '                GP99149
         DC    AL1(05,$PFLBL,0),CL10'LABEL     '                GP99149
         DC    AL1(03,0,$PFHEX),CL10'HEX       '                GP99149
         DC    AL1(04,0,$PFHEX),CL10'TEXT      '                GP99149
         DC    AL1(03,0,$PFASM),CL10'ASM       '                GP99149
         DC    AL1(03,0,$PFXRF+$PFASM),CL10'XRF       '         GP99149
         DC    AL1(04,0,$PFXRF+$PFASM),CL10'XREF      '         GP99149
         DC    AL1(05,0,$PFBUG),CL10'DEBUG     '                GP99149
         DC    AL1(03,0,$PFBUG),CL10'BUG       '                GP99149
         DC    AL1(05,$PFTRC,0),CL10'TRACE     '                GP99149
PRINTDEF DC    AL1(07,$PFDIR+$PFRLD,$PFASM+$PFXRF+$PFPUN),CL10'DEFAULT'
         DC    AL1(04,254,254),CL10'MOST       '                GP99149
         DC    AL1(03,255,255),CL10'ALL '                       GP99149
PRINTOL  DC    AL1(03,$PFTRC,0),CL10'TRC       '                GP99149
* ------------------------------------------------------------------- *
*                                                                     *
*          Set sequentially numbered labels flag                      *
*                                                                     *
* ------------------------------------------------------------------- *
SEQ0000  DS    0H
         ITRACE ID=SEQLABEL
         TM    COMMFLAG,$SEQLABL     ALREADY SET?
         BO    SEQ0010               YES
         OI    COMMFLAG,$SEQLABL     SET SEQUENTIALLY NUMBER LABEL FLAG
         B     PARM0010
SEQ0010  DS    0H
         MVC   PRTDATA(WMSG02L),WMSG02
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
* ------------------------------------------------------------------- *
*                                                                     *
*          Process USING statements                                   *
*                                                                     *
* ------------------------------------------------------------------- *
USNG0000 DS    0H
         ITRACE ID=USING             USING STATEMENT FOUND
         LA    R3,COMMUSNG           CURRENT BLOCK IS ANCHOR
         USING USNGDSCT,R3           DEFINE BASE
USNG0010 DS    0H
         ICM   R1,15,USNGNEXT        NEXT BLOCK ON CHAIN
         BZ    USNG0020              END OF CHAIN FOUND
         LR    R3,R1                 COPY ADDRESS
         B     USNG0010              KEEP FOLLOWING CHAIN
USNG0020 DS    0H
         LA    R1,CTL30              REGISTER NAME'S ADDRESS
         BAL   R9,REG0000            FIND REGISTER TABLE ENTRY
* ------------------------------------------------------------------- *
*       R3 POINTS TO LAST USING BLOCK OR ANCHOR                       *
*       R4 POINTS TO REGISTER TABLE ENTRY                             *
* ------------------------------------------------------------------- *
         CLC   CTL40,COMMBLKS        STARTING DISPLACEMENT ALL BLANK?
         BE    USNG0070              YES
         CLC   CTL50,COMMBLKS        ENDING DISPLACEMENT ALL BLANK?
         BE    USNG0050              YES.. NOT VALID
         LA    R1,8                  MAXIMUM NUMBER OF DIGITS
         LA    R2,CTL40              FIRST CHARACTER OF BEGIN DISP
         BAL   R9,HEX0000            VERIFY/CONVERT BEGIN DISP
         MVC   SAVEBEGN,DISPOUT      SAVE BEGINNING DISPLACEMENT
         LA    R1,8                  MAXIMUM NUMBER OF DIGITS
         LA    R2,CTL50              FIRST CHARACTER OF END DISP
         BAL   R9,HEX0000            VERIFY/CONVERT END DISP
         CLC   SAVEBEGN,DISPOUT      BEGIN LARGER THAN END?
         BH    USNG0060              YES.. ERROR
USNG0030 LA    R0,USNGL                                         GP99140
         BAL   R14,GETMAIN           ACQUIRE STORAGE FOR NEW USNG BLOCK
         ITRACE ID=NEWUSNG,                                            +
               RDATA1=R1             .. TRACE NEW BLOCK'S ADDRESS
         ST    R1,USNGNEXT           CHANGE TO PREVIOUS BLOCK
         LR    R3,R1                 COPY BASE
         MVC   USNGEYE,CNTLUSNG      SET BLOCK IDENTIFIER
*OBS*    XC    USNGNEXT,USNGNEXT     CLEAR FORWARD POINTER      GP99154
*OBS*    MVI   USNGFLAG,0            SET ALL FLAGS OFF          GP99154
         MVC   USNGDSNM,CTL10        SET DSECT'S NAME
         MVC   USNGLBNM,CTL20        SET LABEL WITHIN DSECT
*OBS*    XC    USNGDSA,USNGDSA       CLEAR DSECT BLOCK'S ADDRESS
*OBS*    XC    USNGLBA,USNGLBA       CLEAR LABEL BLOCK'S ADDRESS
*OBS*    XC    USNGDISP,USNGDISP     CLEAR LABEL DISP INTO DSECT
         MVC   USNGBASE,REGVALUE     SET BASE VALUE
         CLC   CTL40,COMMBLKS        STARTING DISPLACEMENT OMITTED?
         BE    USNG0040              YES
         MVC   USNGBEGN,SAVEBEGN     SET BEGINNING DISPLACEMENT
         MVC   USNGEND,DISPOUT       SET ENDING DISPLACEMENT
         B     PARM0010              READ NEXT CONTROL STATEMENT
USNG0040 DS    0H
         OI    USNGFLAG,$USNGND      NO DISPLACEMENTS
*OBS*    XC    USNGBEGN,USNGBEGN     CLEAR STARTING DISP        GP99154
*OBS*    XC    USNGEND,USNGEND       CLEAR ENDING DISP          GP99154
         B     PARM0010              READ NEXT CONTROL STATEMENT
USNG0050 DS    0H
         MVC   PRTDATA(EMSG06L),EMSG06 SET MESSAGE
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
USNG0060 DS    0H
         MVC   PRTDATA(EMSG07L),EMSG07 SET MESSAGE
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
USNG0070 DS    0H
         CLC   CTL50,COMMBLKS        ENDING DISPLACEMENT BLANK?
         BE    USNG0030              YES
         MVC   PRTDATA(EMSG10L),EMSG10
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*    VERIFY offset hex,hex,hex                                        *
*    verify offs 'text'                                               *
*                                                                     *
*    REPLACE offset hex,'text'                                        *
*                                                                     *
*    VERIFY AND REPLACE differ only by the queue they place the       *
*    request on. Parsing and messages otherwise the same.             *
*                                                                     *
* ------------------------------------------------------------------- *
VERF0000 LA    R8,COMMVERS           POINT TO VERIFY QUEUE      GP10085
         B     VERP0000              GO TO COMMON               GP10085
REPL0000 LA    R8,COMMREPS           POINT TO REPLACE QUEUE     GP10085
         PUSH  USING                                            GP10085
*    VER XXX YY - DEFINE VERIFY TEXT; 1-6 DIGIT OFFSET; TEXT IS
*    REP XXX YY - DEFINE REPLACE TEXT;  COMMA SEPARATED HEXADECIMAL
*                       OR QUOTED CHARACTER STRING. OPT. COMMENTS FIELD
*                                                               GP10085
VERP0000 MVI   SUBCODE,0               BASIC FORMAT ERROR       GP10085
         LA    R5,CTLSTMT+4          START PARSE FOR OFFSET     GP10085
         LA    R6,CTLSTMT+71         LAST VALID COLUMN          GP10085
*--------------------------------------------------------------------*
*   PARSE OFFSET - FAIL IF MISSING OR BAD                            *
*--------------------------------------------------------------------*
         BAL   R14,NEXTBLNK  SKIP BLANKS                        GP10085
           B   SETVRSYN      NO; BOO                            GP10085
         BAL   R14,NEXTTEXT  ANY OFFSET ?                       GP10085
           B   SETVRSYN      NO; BOO                            GP10085
         BAL   R14,FINDWORD  GET THE OFFSET                     GP10085
           B   SETVRSYN                                         GP10085
         MVI   SUBCODE,1      OPERAND ERROR                     GP10085
         XC    WORKAREA,WORKAREA                                GP10085
         BAL   R9,HEX0000    CONVERT TO HEX                     GP10085
         MVC   WORKOFFS,DISPOUT  SAVE RESULT                    GP10085
         CLI   DISPOUT,0     THREE BYTES ?                      GP10085
         BH    SETVRSYN      NO; TOO BAD                        GP10085
*--------------------------------------------------------------------*
*   NEED AT LEAST ONE HEX/TEXT ITEM AFTER OFFSET                     *
*--------------------------------------------------------------------*
         MVI   SUBCODE,2     PARSE ERROR                        GP10085
         BAL   R14,NEXTBLNK  SKIP BLANKS                        GP10085
           B   SETVRSYN      NO; BOO                            GP10085
         BAL   R14,NEXTTEXT  GET NEXT ITEM                      GP10085
           B   SETVRSYN      NONE - BOO                         GP10085
         B     VERPTSTR      PROCESS FIRST OPERAND              GP10085
         SPACE 1                                                GP10085
*--------------------------------------------------------------------*
*   LOOP THROUGH INPUT UNTIL BLANK FIELD FOUND                       *
*--------------------------------------------------------------------*
VERPLOOP BAL   R14,NEXTTEXT  GET NEXT ITEM                      GP10085
           B   SETVDONE      NONE - ALL DONE                    GP10085
         CLI   0(R5),C','    COMMA?                             GP10085
         BNE   VERPTSTR      NO; CHECK FOR QUOTES               GP10085
         LA    R5,1(,R5)     SKIP COMMA                         GP10085
         B     VERPLOOP        AND TRY AGAIN                    GP10085
         SPACE 1
VERPTSTR CLI   0(R5),C''''   QUOTED STRING ?                    GP10085
         BE    SETVRSTR      YES; PROCESS DIFFERENTLY           GP10085
         CLI   0(R5),C'"'    QUOTED STRING ?                    GP10085
         BE    SETVRSTR      YES; PROCESS DIFFERENTLY           GP10085
*--------------------------------------------------------------------*
*   PROCESS HEX TEXT (ERROR OTHERWISE)                               *
*--------------------------------------------------------------------*
         BAL   R14,FINDWORD  GET NEXT FIELD                     GP10085
           B   SETVRSYN      ERROR                              GP10085
         MVI   SUBCODE,3      HEX  ERROR                        GP10085
         LA    R4,1(,R1)     COPY LENGTH; SET FOR ROUNDING      GP10085
         SRL   R4,1          NUMBER OF HEX BYTES RESULTING      GP10085
         BAL   R9,HEX0000    CONVERT TO HEX                     GP10085
         L     R3,WORKSIZE   GET CURRENT TEXT SIZE              GP10085
         LA    R15,WORKTEXT(R3)  GET DESTINATION                GP10085
         AR    R3,R4         NEW TEXT LENGTH                    GP10085
         ST    R3,WORKSIZE   STASH IT BACK                      GP10085
         LA    R14,DISPOUT+4   START OF MOVE                    GP10085
         SR    R14,R4        START OF MOVE                      GP10085
         EX    R4,EXMVCHEX   MOVE CONVERTED HEX                 GP10085
         B     VERPLOOP      TRY AGAIN                          GP10085
EXMVCHEX MVC   0(0,R15),0(R14)   MOVE RESULT BYTE(S)            GP10085
         SPACE 1                                                GP10085
*--------------------------------------------------------------------*
*   PROCESS A QUOTED STRING, WITH EITHER ' OR " DELIMITER            *
*--------------------------------------------------------------------*
SETVRSTR LR    R4,R5         REMEMBER THE QUOTE LOCATION        GP10085
         L     R3,WORKSIZE   GET CURRENT TEXT SIZE              GP10085
         LA    R15,WORKTEXT(R3)  GET DESTINATION                GP10085
         MVI   SUBCODE,4      TEXT ERROR                        GP10085
SETVRTUP LA    R5,1(,R5)     SKIP THE LEADING QUOTE             GP10085
         CR    R5,R6         REACHED END OF STRING?             GP10085
         BH    SETVRSYN      YES; VIOLATION                     GP10085
         CLC   0(1,R5),0(R4)  IS IT A MATCHING QUOTE?           GP10085
         BNE   SETVRTMV      NO; MOVE ONE                       GP10085
         CLC   1(1,R5),0(R4) PAIRED QUOTE?                      GP10085
         BNE   SETVRTND      NO; END (MUST HAVE BLANK)          GP10085
         LA    R5,1(,R5)     SKIP FIRST QUOTE OF PAIR           GP10085
SETVRTMV MVC   0(1,R15),0(R5)  MOVE CHARACTER                   GP10085
         LA    R15,1(,R15)   MOVE OUT POINTER                   GP10085
         LA    R3,1(,R3)     UP OUT LENGTH                      GP10085
         B     SETVRTUP      INCREASE INPUT POINTER             GP10085
SETVRTND ST    R3,WORKSIZE   STASH NEW SIZE                     GP10085
         CR    R5,R6         END ?                              GP10085
         BNL   SETVDONE      PLAYING IT CLOSE TO THE VEST       GP10085
         LA    R5,1(,R5)     SKIP TRAILING QUOTE                GP10085
         CLI   0(R5),C' '    MUST HAVE QUOTE/SPACE ENDING       GP10085
         BNE   VERPLOOP      LOOK FOR IT                        GP10085
         SPACE 1                                                GP10085
*--------------------------------------------------------------------*
*   SCAN COMPLETE WITHOUT ERRORS; BUILD VER/REP BLOCK AND CHAIN      *
*--------------------------------------------------------------------*
SETVDONE MVI   SUBCODE,0      TEXT ERROR                        GP10085
         ICM   R2,15,WORKSIZE    CHECK TEXT LENGTH              GP10085
         BNP   SETVRSYN      HUH?                               GP10085
         BCTR  R2,0          MAKE EXECUTE LENGTH                GP10085
         ST    R2,WORKSIZE   SAVE TEXT LENGTH - 1               GP10085
         LA    R0,VERPL      GET BLOCK LENGTH                   GP10085
         BAL   R14,GETMAIN   AND GET A BLOCK                    GP10085
         MVC   0(VERPL,R1),WORKAREA  MOVE FROM WORK SPACE       GP10085
         USING VERPSECT,R2                                      GP10085
         LR    R2,R8         ROOT OF CHAIN                      GP10085
SETVFEND ICM   R3,15,VERPNEXT     LAST ENTRY YET ?              GP10085
         BZ    SETVSTOR      YES                                GP10085
         LR    R2,R3                                            GP10085
         B     SETVFEND      TRY AGAIN                          GP10085
SETVSTOR ST    R1,VERPNEXT   CHAIN ON END                       GP10085
         B     PARM0010      DONE WITH THIS CARD                GP10085
         SPACE 1                                                GP10085
SETVRSYN MVC   PRTDATA(EMSG36L),EMSG36   MOVE ERROR MESSAGE     GP10085
         CLI   SUBCODE,SUB36M#    VALID CODE ?                  GP10085
         BNL   SETVRSYP                                         GP10085
         SR    R1,R1                                            GP10085
         IC    R1,SUBCODE         GET CODE                      GP10085
         SLL   R1,4               * LEN                         GP10085
         LA    R1,SUB36M1(R1)     POINT TO MESSAGE              GP10085
         MVI   PRTDATA+EMSG36L+1,C'-'                           GP10085
         MVC   PRTDATA+EMSG36L+3(L'SUB36M1),0(R1)               GP10085
SETVRSYP OI    COMMFLAG,$ERROR+$ABORT                           GP10085
         BAL   R9,PRT0000            PRINT MESSAGE              GP10085
         B     PARM0010                                         GP10085
         SPACE 1
NEXTTEXT CLI   0(R5),C' '    SPACER?                            GP10085
         BNE   4(,R14)       NO; RETURN TO CALLER               GP10085
         LA    R5,1(,R5)                                        GP10085
         CR    R5,R6         AT END ?                           GP10085
         BNH   NEXTTEXT                                         GP10085
         BR    R14           ELSE NO MATCH                      GP10085
         SPACE 1                                                GP10085
NEXTBLNK CLI   0(R5),C' '    SPACER?                            GP10085
         BE    4(,R14)                                          GP10085
         CLI   0(R5),C','    SEPARATOR?                         GP10085
         BE    4(,R14)                                          GP10085
         LA    R5,1(,R5)                                        GP10085
         CR    R5,R6         AT END ?                           GP10085
         BNH   NEXTBLNK                                         GP10085
         BR    R14           ELSE NO MATCH                      GP10085
         SPACE 1                                                GP10085
FINDWORD LR    R2,R5         REMEMBER START OF TEXT             GP10085
         LR    R0,R14        REMEMBER THE RETURN ADDRESS        GP10085
         BAL   R14,NEXTBLNK  GET FIRST BLANK AFTER              GP10085
         LR    R14,R0        RESTORE THE RETURN ADDRESS         GP10085
         LR    R1,R5         GET NEW END                        GP10085
         SR    R1,R2         GET LENGTH                         GP10085
         BNPR  R14           INVALID                            GP10085
         CH    R1,=H'8'      NOT TOO LONG?                      GP10085
         BHR   R14           TOO LONG; SO LONG                  GP10085
         B     4(,R14)       RETURN WITH CC SET                 GP10085
         POP   USING                                            GP10085
         SPACE 1                                                GP10085
         DS    0A            ALIGN                              GP10085
WORKAREA DC    0XL76'0',A(0) COPY OF VERPSECT BLOCK             GP10085
WORKOFFS DC    A(0)          OFFSET                             GP10085
WORKSIZE DC    A(0)          LENGTH                             GP10085
WORKTEXT DC    XL64'0'       VER/REP TEXT                       GP10085
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        Locate register table entry                                  *
*                                                                     *
*          R1  is register name's address                             *
*          R9  is return address                                      *
*                                                                     *
*          At exit R4 will point to the register table entry.         *
*                                                                     *
*          If any error is found, control is passed to 'PARM0010'.    *
*                                                                     *
* ------------------------------------------------------------------- *
REG0000  DS    0H
         ITRACE ID=CONVREG
         CLI   0(R1),C' '            BLANK?
         BE    REG0050               YES.. INVALID
         CLC   3(7,R1),COMMBLKS      REFERENCE TOO LONG?
         BNE   REG0060               YES.. INVALID
         CLI   0(R1),C'@'    'AT' REGISTER NAME?                GP13236
         BE    REG0005         YES; SKIP OVER IT                GP13236
         CLI   0(R1),C'R'    OR IS IT NORMAL MNEMONIC ?         GP13236
         BNE   REG0006                                          GP13236
REG0005  LA    R1,1(,R1)     SKIP PREFIX
REG0006  CLI   2(R1),C' '    3-CHARACTERS LEFT ?                GP13236
         BNE   REG0060         YES; FAIL IT                     GP13236
         CLI   1(R1),C' '            2-CHARACTER NAME?
         BNE   REG0020               YES
REG0010  ITRACE ID=REG1
         LA    R4,REGTBL1            1-CHARACTER NAME TABLE
         SR    R2,R2                 SET LENGTH (1 BYTE)
         B     REG0030               FIND TABLE ENTRY
*EG0010  DS    0H
*OLD*    ITRACE ID=REG3
*OLD*    LA    R4,REGTBL3            3-CHARACTER NAME TABLE
*OLD*    LA    R2,2                  SET LENGTH (3 BYTES)
*OLD*    B     REG0030               FIND TABLE ENTRY
REG0020  DS    0H
         CLI   0(R1),C'0'    LEADING ZERO ?                     GP13236
         BNE   REG0025         NO
         LA    R1,1(,R1)     SKIP LEADING ZERO                  GP13236
         B     REG0010       AND PROCESS AS SINGLE CHARACTER    GP13236
REG0025  ITRACE ID=REG2
         LA    R4,REGTBL2            2-CHARACTER NAME TABLE
         LA    R2,1                  SET LENGTH (2 BYTES)
REG0030  DS    0H
         CLI   0(R4),X'FF'           END OF TABLE?
         BE    REG0040               YES.. INVALID
         EX    R2,REGCLC             REGISTER NAME MATCH?
         BER   R9                    YES
         LA    R4,REGL(,R4)          NEXT REGISTER ENTRY
         B     REG0030               LOOP
REG0040  DS    0H
         ITRACE ID=BADREG
         MVC   PRTDATA(EMSG05L),EMSG05 SET MESSAGE
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
REG0050  DS    0H
         ITRACE ID=REGBLANK
         MVC   PRTDATA(EMSG13L),EMSG13 SET MESSAGE
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
REG0060  DS    0H
         ITRACE ID=REGLONG
         MVC   PRTDATA(EMSG14L),EMSG14 SET MESSAGE
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
REGCLC   CLC   REGNAME(0),0(R1)      TEST REGISTER NAME
         SPACE 1                                                GP99172
* ------------------------------------------------------------------- *
*                                                                     *
*          Convert character to integer                               *
*                                                                     *
*          R1 should be the number of characters (up to 9)            *
*          R2 should be the address of the first character            *
*          R9 should be the return address                            *
*                                                                     *
*             At exit R0 will have the 32-bit value                   *
*                                                                     *
*          If any error is found, control is passed to 'PARM0010'.    *
*                                                                     *
* ------------------------------------------------------------------- *
INTG000  LR    R14,R2        SAVE START IN SAFE REGISTER        GP99172
         EX    R1,EXINTTRT   LOOK FOR HEX                       GP99172
         BZ    HEX0050       MORE THAN USER WANTED - TOO LONG   GP99172
         CLI   0(R2),C'0'    LEADING ZERO?                      GP99172
         BE    HEX0000       YES; TREAT AS HEX                  GP99172
         CLM   R2,1,COMMBLKS  BLANK STOPPER?                    GP99172
         BNE   HEX0040       NO                                 GP99172
         LR    R15,R1        COPY STOPPER                       GP99172
         SR    R15,R14       LESS START                         GP99172
         BNP   HEX0050       INVALID                            GP99172
         LR    R2,R1         ADVANCE PARSE POINTER              GP99172
         BCTR  R15,0         EXEC LENGTH                        GP99172
         EX    R15,EXINTPAK  PACK                               GP99172
         CVB   R0,COMMDWRD                                      GP99172
         BR    R9                    GET OUTTA HERE             GP99172
EXINTTRT TRT   0(0,R2),INTTRT  VERIFY INTEGER                   GP99172
EXINTPAK PACK  COMMDWRD,0(0,R14) PACK INCOMING                  GP99172
         SPACE 1                                                GP99172
* ------------------------------------------------------------------- *
*                                                                     *
*          Convert character to hex                                   *
*                                                                     *
*          R1 should be the number of characters (up to 8)            *
*          R2 should be the address of the first character            *
*          R9 should be the return address                            *
*                                                                     *
*             At exit 'DISPOUT' will be the value in hex              *
*                                                                     *
*          If any error is found, control is passed to 'PARM0010'.    *
*                                                                     *
* ------------------------------------------------------------------- *
HEX0000  XC    DISPIN,DISPIN  CLEAR WORK                        GP99172
         LR    R14,R2        SAVE START IN SAFE REGISTER        GP99172
         EX    R1,EXHEXTRT   LOOK FOR HEX                       GP99172
         BZ    HEX0050       MORE THAN USER WANTED - TOO LONG   GP99172
         CLI   0(R1),C','    COMMA SEPARATOR?                   GP10085
         BE    HEX0010       YES                                GP10085
         CLM   R2,1,COMMBLKS  BLANK STOPPER?                    GP99172
         BNE   HEX0040       NO                                 GP99172
HEX0010  LR    R15,R1        COPY STOPPER                       GP99172
         SR    R15,R14       LESS START                         GP99172
         BNP   HEX0050       INVALID                            GP99172
         BCTR  R15,0         EXEC LENGTH                        GP99172
         LA    R1,DISPIN+L'DISPIN-1                             GP99172
         SR    R1,R15       START MOVE                          GP99172
         EX    R15,EXHEXMVC  MOVE TO WORK AREA                  GP99172
         LR    R2,R1         ADVANCE PARSE POINTER              GP99172
         NC    DISPIN,COMM1F1F  STRIP ZONES                     GP99172
         TR    DISPIN,COMMCHHX  MAKE HEX BYTES                  GP99172
         PACK  DISPOUT(5),DISPIN(9)  PACK
         BR    R9                    GET OUTTA HERE
EXHEXTRT TRT   0(0,R2),HEXTRT  VERIFY HEX DIGITS                GP99172
EXHEXMVC MVC   0(0,R1),0(R14) MOVE HEX TEXT                     GP99172
         SPACE 1                                                GP99172
HEX0040  MVC   PRTDATA(EMSG08L),EMSG08                          GP99172
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
         SPACE 1                                                GP99172
HEX0050  MVC   PRTDATA(EMSG09L),EMSG09                          GP99172
         OI    COMMFLAG,$ERROR+$ABORT
         BAL   R9,PRT0000            PRINT MESSAGE
         B     PARM0010
         SPACE 1                                                GP99172
PRT0000  BAL   R14,PRINTREC                                     GP99138
         BR    R9                    RETURN
EXIT0000 DS    0H
         ITRACE ID=PARMEOF           END OF FILE
         TM    PGMFLAG,$ASMOPEN      ASSEMBLER INPUT OPEN?
         BNO   EXIT0010              NO
         ITRACE ID=CLOSEASM          CLOSING SYSIN DCB
         NI    PGMFLAG,255-$ASMOPEN  INDICATE DCB IS CLOSED
         CLOSE SYSIN
EXIT0010 TM    COMMDD,$ADADD+$LISTDD  ADATA/LIST PROCESS?       GP99167
         BNZ   EXIT0030      SET PRINT DEFAULTS?                GP99167
         OC    COMMBASE,COMMBASE     BASE REGISTER(S) DEFINED?
         BZ    EXIT0020              NO
         CLC   COMMPFX,COMMBLKS      PREFIX DEFINED?
         BNE   EXIT0030              YES
         OI    COMMFLAG,$ERROR+$ABORT
         MVC   PRTDATA(EMSG20L),EMSG20
         BAL   R9,PRT0000            PRINT MESSAGE
         B     EXIT0030              EXIT
EXIT0020 DS    0H
         CLC   COMMPFX,COMMBLKS      PREFIX DEFINED?
         BE    EXIT0030              NO
         OI    COMMFLAG,$ERROR+$ABORT
         MVC   PRTDATA(EMSG21L),EMSG21
         BAL   R9,PRT0000            PRINT MESSAGE
EXIT0030 OC    PRINTFG1(2),PRINTFG1  USER SPECIFY ANY PRINT OPTIONS?
         BNZ   EXIT0040                                         GP99167
*  BY DEFAULT, DO NOT PRINT CESD OR CSECT TEXT (FOR NUCLEUS, ETC.)
         MVC   PRINTFG1(2),PRINTDEF+1   SET DEFAULTS            GP99149
EXIT0040 TM    COMMFLAG,$ERROR+$ABORT  ALREADY HAVE A MESSAGE?  GP99167
         BNZ   EXIT0050                                         GP99167
         TM    PGMFLAG,$PFHAVE  HAD INPUT ?                     GP99167
         BNZ   EXIT0050                                         GP99167
         LA    R1,WMSG01                                        GP99167
         BAL   R14,PRINTMSG  WRITE A WARNING                    GP99167
EXIT0050 DS    0H                                               GP99167
         ITRACE ID=EXIT
         L     R13,4(,R13)           RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
         SPACE 1
         LTORG ,                                                GP10085
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
SAVEBEGN DC    A(0)                  SAVED BEGINNING DISPLACEMENT
SAVEEND  DC    A(0)                  SAVED ENDING DISPLACEMENT  GP99172
H4096    DC    H'4096'               4K IN DECIMAL
PMIN     DC    PL3'&MINL'            MINIMUM LINE COUNT ALLOWED
PGMFLAG  DC    X'00'
$SUBH    EQU   X'80'                 SUBHEADING PRINTED
$ASMOPEN EQU   X'40'                 ASSEMBLER INPUT DCB OPEN
$AFLUSH  EQU   X'20'                 END CARD FOUND; FLUSH REST GP99139
$PFHAVE  EQU   X'02'         HAD SOME INPUT                     GP99167
         SPACE 1
DISPIN   DC    CL8' '
         DC    X'00'                 PAD FOR PACKING
DISPOUT  DC    XL4'00000000'
         DC    X'00'                 PAD FOR PACKING
         SPACE 1
         DC    C'0'
LINEIN   DC    CL3'000'
LINEOUT  DC    PL3'0'
         SPACE 1
SUBHEAD  DC    C' CONTROL STATEMENTS '
SUBHEADL EQU   *-SUBHEAD
*---------------------------------------------------------------------*
*              WARNING MESSAGES                                       *
*---------------------------------------------------------------------*
WMSG01   DC    AL1(L'WMSG01T)                                   GP99167
WMSG01T  DC    C'DISASM0201W NO OPTIONS CARDS PROCESSED'        GP99167
WMSG02   DC    C'DISASM0202W SEQUENTIALLY NUMBERED LABELS HAVE ALREADY +
               BEEN REQUESTED'
WMSG02L  EQU   *-WMSG02
*---------------------------------------------------------------------*
*              ERROR MESSAGES                                         *
*---------------------------------------------------------------------*
EMSG03   DC    C'DISASM0203E INVALID CONTROL STATEMENT'         GP99167
EMSG03L  EQU   *-EMSG03                                         GP99167
EMSG04   DC    C'DISASM0204E EXTRANEOUS DATA IN REGISTER PARAMETER'
EMSG04L  EQU   *-EMSG04
EMSG05   DC    C'DISASM0205E INVALID REGISTER REFERENCE'
EMSG05L  EQU   *-EMSG05
EMSG06   DC    C'DISASM0206E END DISPLACEMENT IS REQUIRED WHEN BEGIN DI+
               SPLACEMENT IS GIVEN'
EMSG06L  EQU   *-EMSG06
EMSG07   DC    C'DISASM0207E BEGIN DISPLACEMENT IS LARGER THAN END DISP+
               LACEMENT'
EMSG07L  EQU   *-EMSG07
EMSG08   DC    C'DISASM0208E INVALID DIGIT'                     GP99172
EMSG08L  EQU   *-EMSG08
EMSG09   DC    C'DISASM0209E INVALID NUMBER OF DIGITS'          GP99172
EMSG09L  EQU   *-EMSG09
EMSG10   DC    C'DISASM0210E END DISPLACEMENT NOT ALLOWED UNLESS START +
               DISPLACEMENT IS SPECIFIED'
EMSG10L  EQU   *-EMSG10
EMSG11   DC    C'DISASM0211E PREFIX MAY NOT BE BLANK'           GP99134
EMSG11L  EQU   *-EMSG11
EMSG12   DC    C'DISASM0212E PREFIXES MUST BE 4 CHARACTERS OR LESS'
EMSG12L  EQU   *-EMSG12
EMSG13   DC    C'DISASM0213E BASE REGISTER IS BLANK'
EMSG13L  EQU   *-EMSG13
EMSG14   DC    C'DISASM0214E BASE REGISTER NAME EXCEEDS 3 CHARACTERS IN+
                LENGTH'
EMSG14L  EQU   *-EMSG14
EMSG15   DC    C'DISASM0215E ''DATA'' IS RESERVED FOR DATA AREA PREFIXE+
               S, CHOOSE ANOTHER PREFIX'
EMSG15L  EQU   *-EMSG15
EMSG16   DC    C'DISASM0216E INVALID DIGIT IN LINE/LINES/MAXLINES STATE+
               MENT'
EMSG16L  EQU   *-EMSG16
EMSG17   DC    C'DISASM0217E LINE COUNT VALUE IN LINE/LINES/MAXLINES ST+
               ATEMENT IS TOO LONG OR CONTAINS EXTRANEOUS DATA'
EMSG17L  EQU   *-EMSG17
EMSG18   DC    C'DISASM0218E LINE COUNT VALUE IN LINE/LINES/MAXLINES ST+
               ATEMENT IS BELOW MINIMUM ALLOWED'
EMSG18L  EQU   *-EMSG18
EMSG19   DC    C'DISASM0219E PREFIX HAS ALREADY BEEN DEFINED, CHOOSE ON+
               E OR THE OTHER'                                  GP99139
EMSG19L  EQU   *-EMSG19
EMSG20   DC    C'DISASM0220E PREFIX MUST BE DEFINED WHEN BASE REGISTERS+
                ARE DEFINED'                                    GP99139
EMSG20L  EQU   *-EMSG20
EMSG21   DC    C'DISASM0221E PREFIX NOT VALID UNLESS BASE REGISTER(S) A+
               RE DEFINED'                                      GP99139
EMSG21L  EQU   *-EMSG21
EMSG22   DC    C'DISASM0222E THIS AREA OVERLAPS AREA AT '
EMSG22A  DC    CL4' '
         DC    C' TO '
EMSG22B  DC    CL4' '
         DC    C' '
EMSG22L  EQU   *-EMSG22
EMSG23   DC    C'DISASM0223E STARTING DISPLACEMENT IS LARGER THAN ENDIN+
               G DISPLACEMENT OR CSECT'                         GP10025
EMSG23L  EQU   *-EMSG23
EMSG24   DC    AL1(L'EMSG24T)                                   GP99139
EMSG24T  DC    C'DISASM0224E MALFORMED STATEMENT; REQUIRES LABEL NAME/O*
               FFSET/TYPE/LEN/SECTNAME'                         GP99139
EMSG25   DC    AL1(L'EMSG25T)                                   GP99139
EMSG25T  DC    C'DISASM0225E OVERLAPPING OR DUPLICATE OFFSET.'  GP99139
EMSG26   DC    AL1(L'EMSG26T)                                   GP99139
EMSG26T  DC    C'DISASM0226W ASSEMBLER INPUT AFTER END CARD IGNORED.'
EMSG33   DC    C'DISASM0233W UNSUPPORTED OR UNDEFINED VALUE'    GP09181
EMSG33L  EQU   *-EMSG33                                         GP09181
EMSG34   DC    C'DISASM0234W OPCODE MODULE NOT FOUND'           GP10015
EMSG34L  EQU   *-EMSG34                                         GP10015
EMSG36   DC    C'DISASM0236E SYNTAX ERROR IN STATEMENT'         GP10085
EMSG36L  EQU   *-EMSG36                                         GP10085
SUBCODE  DC    X'0'                                             GP10085
SUB36M1  DC    CL16'MALFORMED'              0                   GP10085
SUB36M2  DC    CL16'BAD OFFSET'             1                   GP10085
         DC    CL16'PARSE ERROR'            2                   GP10085
         DC    CL16'BAD HEX TEXT'           3                   GP10085
         DC    CL16'QUOTE ERROR'            4                   GP10085
SUB36M#  EQU   (*-SUB36M1)/(SUB36M2-SUB36M1)    5               GP10085
*---------------------------------------------------------------------*
*   INPUT MAPPING; MAJOR COMMANDS; DCBs; etc.                         *
*---------------------------------------------------------------------*
         SPACE 1
CTLSTMT  DS    0CL80
CTLTYPE  DC    CL09' '               STATEMENT TYPE
CTLDATA  DC    CL71' '               RELATED DATA
CTLSTMTL EQU   *-CTLSTMT
         ORG   CTLDATA
CTL10    DS    CL10                  DATA STARTING AT COLUMN 10
CTL20    DS    CL10                  DATA STARTING AT COLUMN 20
CTL30    DS    CL10                  DATA STARTING AT COLUMN 30
CTL40    DS    CL10                  DATA STARTING AT COLUMN 40
CTL50    DS    CL10                  DATA STARTING AT COLUMN 50
CTL60    DS    CL10                  DATA STARTING AT COLUMN 60
CTL70    DS    CL10                  DATA STARTING AT COLUMN 70
         ORG   CTLSTMT+80
         SPACE 1
CNTLTBLE DC    CL09'ABEND    ',AL4(ABEND000)
CNTLTBL2 DC    CL09'ADATA    ',AL4(ADATA000)                    GP99167
         DC    CL09'ASM START',AL4(ASM0000)
CNTLBASE DC    CL09'BASE     ',AL4(BASE0000)
         DC    CL09'CSECT    ',AL4(CSCT0000)
         DC    CL09'SECT     ',AL4(CSCT0000)                    GP10071
CNTLDATA DC    CL09'DATA     ',AL4(DATA0000)
         DC    CL09'FILLER   ',AL4(DATA0000)     DS             GP10029
         DC    CL09'ZDATA    ',AL4(DATA0000)     DS             GP10029
         DC    CL09'FILL     ',AL4(DATA0000)     DS             GP10029
         DC    CL09'LABEL    ',AL4(LABL0000)
         DC    CL09'LINE     ',AL4(LINE0000)
         DC    CL09'LINES    ',AL4(LINE0000)
         DC    CL09'LIST     ',AL4(ADATA000)                    GP99167
         DC    CL09'MAX LINES',AL4(LINE0000)
         DC    CL09'MEMBER   ',AL4(MOD0000)                     GP99149
         DC    CL09'MODULE   ',AL4(MOD0000)
         DC    CL09'NAME     ',AL4(MOD0000)                     GP99149
         DC    CL09'OPCODES  ',AL4(OPCD000)                     GP10015
         DC    CL09'OPCODE   ',AL4(OPCD000)                     GP10015
         DC    CL09'INST     ',AL4(OPCD000)                     GP10015
         DC    CL09'OPTIONS  ',AL4(OPTS000)                     GP08063
         DC    CL09'OPTION   ',AL4(OPTS000)                     GP08063
         DC    CL09'OPT      ',AL4(OPTS000)                     GP08063
         DC    CL09'PFX      ',AL4(PRFX0000)                    GP99134
         DC    CL09'PREFIX   ',AL4(PRFX0000)                    GP99134
         DC    CL09'PRINT    ',AL4(PRNT0000)                    GP99134
         DC    CL09'REP      ',AL4(REPL0000)                    GP10085
         DC    CL09'REPLACE  ',AL4(REPL0000)                    GP10085
         DC    CL09'SEQ LABEL',AL4(SEQ0000)
         DC    CL09'SEQLABEL ',AL4(SEQ0000)                     GP10085
         DC    CL09'SYSADATA ',AL4(ADATA000)                    GP99167
CNTLUSNG DC    CL09'USING    ',AL4(USNG0000)
         DC    CL09'VER      ',AL4(VERF0000)                    GP10085
CNTLTBLN DC    CL09'VERIFY   ',AL4(VERF0000)                    GP10085
CNTLTBLL EQU   CNTLTBL2-CNTLTBLE  SIZE OF ONE ENTRY             GP10085
CNTLTBL# EQU   (CNTLTBLN-CNTLTBLE)/CNTLTBLL+1   ENTRY NUMBER    GP10085
CNTLASME DC    CL09'ASM END'
*---------------------------------------------------------------------*
*                                                                     *
*              DCBS                                                   *
*                                                                     *
*---------------------------------------------------------------------*
DISIN    DCB   DDNAME=DISIN,         CONTROL STATEMENT DCB             +
               DSORG=PS,             .. SEQUENTIAL                     +
               EODAD=EXIT0000,       .. EOF ADDRESS                    +
               LRECL=80,             .. MUST BE LRECL=80               +
               MACRF=GM              .. GET-MOVE MODE
SYSIN    DCB   DDNAME=SYSIN,         ASSEMBLER'S INPUT DCB             +
               DSORG=PS,             .. SEQUENTIAL                     +
               LRECL=80,             .. MUST BE LRECL=80               +
               BLKSIZE=3120,         .. BLOCK SIZE                     +
               MACRF=PM              .. PUT-MOVE MODE
REGTBL1  DS    0C                    1-CHARACTER REGISTER NAMES
         REG   0,0
         REG   1,1
         REG   2,2
         REG   3,3
         REG   4,4
         REG   5,5
         REG   6,6
         REG   7,7
         REG   8,8
         REG   9,9
         REG   A,10
         REG   B,11
         REG   C,12
         REG   D,13
         REG   E,14
         REG   F,15
         DC    X'FF'
REGTBL2  DS    0C                    2-CHARACTER REGISTER NAMES
*OLD*    REG   R0,0
*OLD*    REG   R1,1
*OLD*    REG   R2,2
*OLD*    REG   R3,3
*OLD*    REG   R4,4
*OLD*    REG   R5,5
*OLD*    REG   R6,6
*OLD*    REG   R7,7
*OLD*    REG   R8,8
*OLD*    REG   R9,9
         REG   10,10
         REG   11,11
         REG   12,12
         REG   13,13
         REG   14,14
         REG   15,15
*OLD*    REG   RA,10
*OLD*    REG   RB,11
*OLD*    REG   RC,12
*OLD*    REG   RD,13
*OLD*    REG   RE,14
*OLD*    REG   RF,15
         DC    X'FF'
*EGTBL3  DS    0C                    3-CHARACTER REGISTER NAMES
*OLD*    REG   R10,10
*OLD*    REG   R11,11
*OLD*    REG   R12,12
*OLD*    REG   R13,13
*OLD*    REG   R14,14
*OLD*    REG   R15,15
*OLD*    DCG   X'FF'
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*              REGISTER TABLE                                         *
*                                                                     *
*---------------------------------------------------------------------*
REGDSCT  DSECT
REGNAME  DS    CL3                   REGISTER NAME
REGVALUE DS    AL1                   VALUE USED IN INSTRUCTIONS
REGL     EQU   *-REGDSCT
         COPY  DISASMDA
*---------------------------------------------------------------------*
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
*---------------------------------------------------------------------*
DISASM00 DISASMCM TYPE=DSECT
         END  DISASM02
